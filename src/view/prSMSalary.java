/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import model.PRdb;
import java.awt.Color;
import java.awt.Frame;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class prSMSalary extends javax.swing.JFrame {

    /**
     * Creates new form prSMSalary
     */
    public prSMSalary() {
        initComponents();
        setIconImage((new ImageIcon(getClass().getResource("/Pictures/wallet_64.png")).getImage()));
        setExtendedState(Frame.MAXIMIZED_BOTH);
        jLabel1.setVisible(false);
        txtTPaid.setVisible(false);
    }

    public void autoCal() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) SMSalaryTable.getModel();
            double tot = 0;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                tot = tot + Double.parseDouble(dtm.getValueAt(i, 6).toString());
            }
            txtTPaid.setText("");
            txtTPaid.setText(tot + "");

////            txtDiscount.setText("20");
//            double tA, d, resultDV, resultNA;
//            tA = Double.parseDouble(txtTPaid.getText());
//            d = Double.parseDouble(txtDiscount.getText());
//            resultDV = tA * d / 100;
//            resultNA = tA - (tA * d / 100);
//            txtDValue.setText(String.valueOf(resultDV));
//            txtNAmount.setText(String.valueOf(resultNA));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        YearComboBox = new javax.swing.JComboBox<String>();
        MonthComboBox = new javax.swing.JComboBox<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        SMSalaryTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtTPaid = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        txtSearchStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtWOP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFAdvance = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtStamp = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Summary of Salary Details - Payroll System");

        YearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Year", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        YearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearComboBoxActionPerformed(evt);
            }
        });

        MonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        MonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthComboBoxActionPerformed(evt);
            }
        });

        SMSalaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Employee No", "Basic", "W&OP", "Festival Advance", "Stamp", "Total Earning", "Total Gross pay", "Total Deduction", "Net Salary", "System User"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SMSalaryTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                SMSalaryTableAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(SMSalaryTable);
        if (SMSalaryTable.getColumnModel().getColumnCount() > 0) {
            SMSalaryTable.getColumnModel().getColumn(0).setMinWidth(40);
            SMSalaryTable.getColumnModel().getColumn(0).setPreferredWidth(45);
            SMSalaryTable.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Total Paid");

        txtTPaid.setEditable(false);

        txtSearch.setForeground(new java.awt.Color(153, 153, 153));
        txtSearch.setText("Search Employee No");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        txtSearchStatus.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("W&OP");

        txtWOP.setEditable(false);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Festival Advance");

        txtFAdvance.setEditable(false);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stamp");

        txtStamp.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(YearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWOP, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(YearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTPaid)
                    .addComponent(txtSearchStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtStamp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtWOP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(770, 522));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void YearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearComboBoxActionPerformed

        MonthComboBox.setEnabled(true);
    }//GEN-LAST:event_YearComboBoxActionPerformed

    private void MonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthComboBoxActionPerformed

        try {
            DefaultTableModel dtm = (DefaultTableModel) SMSalaryTable.getModel();
            Statement s = PRdb.getConnection().createStatement();
            ResultSet rs = s.executeQuery("SELECT s.`idSalary`,s.`idEmployee`,s.`basic`,s.`wop`,s.`festival`,s.`stamp`,s.`tEarning`,s.`tGross`,s.`tDeduction`,s.`nPay`,u.`userName` FROM salary s,suser u WHERE s.`idSUser`=u.`idSUser` && s.month='" + YearComboBox.getSelectedItem() + " " + MonthComboBox.getSelectedItem() + "'");
//                ResultSet rs = s.executeQuery("SELECT*FROM salary WHERE month='" + YearComboBox.getSelectedItem() + " " + MonthComboBox.getSelectedItem() + "'");
            dtm.setRowCount(0);
//                if (rs.next()) {
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("idSalary"));
                v.add(rs.getString("idEmployee"));
                v.add(rs.getString("basic"));
                v.add(rs.getString("wop"));
                v.add(rs.getString("festival"));
                v.add(rs.getString("stamp"));
                v.add(rs.getString("tEarning"));
                v.add(rs.getString("tGross"));
                v.add(rs.getString("tDeduction"));
                v.add(rs.getString("nPay"));
                v.add(rs.getString("userName"));
                dtm.addRow(v);
                txtSearchStatus.setForeground(Color.black);
                txtSearchStatus.setText(String.valueOf("Salary Details of " + SMSalaryTable.getRowCount()) + " Employee");
            }
            double tot = 0, totW=0, totF=0, totS=0;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                tot = tot + Double.parseDouble(dtm.getValueAt(i, 9).toString());
                totW = totW + Double.parseDouble(dtm.getValueAt(i, 3).toString());
                totF = totF + Double.parseDouble(dtm.getValueAt(i, 4).toString());
                totS = totS + Double.parseDouble(dtm.getValueAt(i, 5).toString());
            }
//            txtTPaid.setText("");
            txtTPaid.setText(tot + "");
            txtWOP.setText(totW+"");
            txtFAdvance.setText(totF+"");
            txtStamp.setText(totS+"");
//                } else {
//                    txtSearchStatus.setText("Salary details not found on " + YearComboBox.getSelectedItem() + " " + MonthComboBox.getSelectedItem() + " !");
//                }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_MonthComboBoxActionPerformed

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained

        if ("Search Employee No".equals(txtSearch.getText())) {
            txtSearch.setText("");
            txtSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost

        if ("".equals(txtSearch.getText())) {
            txtSearch.setText("Search Employee No");
            txtSearch.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased

        try {
            DefaultTableModel dtm = (DefaultTableModel) SMSalaryTable.getModel();
            if (!txtSearch.getText().isEmpty()) {
                Statement s = PRdb.getConnection().createStatement();
                ResultSet rs = s.executeQuery("SELECT s.`idSalary`,s.`idEmployee`,s.`basic`,s.`tEarning`,s.`tGross`,s.`tDeduction`,s.`nPay`,u.`userName` FROM salary s,suser u WHERE s.`idSUser`=u.`idSUser` && s.idEmployee LIKE '%" + txtSearch.getText() + "%'");
//                ResultSet rs = s.executeQuery("SELECT*FROM salary WHERE idEmployee LIKE '%" + txtSearch.getText() + "%'");
                dtm.setRowCount(0);
                while (rs.next()) {
                    Vector v = new Vector();
                    v.add(rs.getString("idSalary"));
                    v.add(rs.getString("idEmployee"));
                    v.add(rs.getString("basic"));
                    v.add(rs.getString("tEarning"));
                    v.add(rs.getString("tGross"));
                    v.add(rs.getString("tDeduction"));
                    v.add(rs.getString("nPay"));
                    v.add(rs.getString("userName"));
                    dtm.addRow(v);
                    txtSearchStatus.setForeground(Color.black);
                    txtSearchStatus.setText(String.valueOf(SMSalaryTable.getRowCount()) + " Result");
                }
                if (dtm.getRowCount() <= 0) {
                    txtSearchStatus.setText("Not Found");
                    txtSearchStatus.setForeground(Color.red);
                    SMSalaryTableAncestorAdded(null);
                }
            } else {
                SMSalaryTableAncestorAdded(null);
                txtSearchStatus.setText(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SMSalaryTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_SMSalaryTableAncestorAdded

        try {
            DefaultTableModel dtm = (DefaultTableModel) SMSalaryTable.getModel();
            dtm.setRowCount(0);
            Statement s = PRdb.getConnection().createStatement();
            ResultSet rs = s.executeQuery("SELECT s.`idSalary`,s.`idEmployee`,s.`basic`,s.`wop`,s.`festival`,s.`stamp`,s.`tEarning`,s.`tGross`,s.`tDeduction`,s.`nPay`,u.`userName` FROM salary s,suser u WHERE s.`idSUser`=u.`idSUser`");
//            ResultSet rs = s.executeQuery("SELECT*FROM salary ORDER BY idSalary");
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("idSalary"));
                v.add(rs.getString("idEmployee"));
                v.add(rs.getString("basic"));
                v.add(rs.getString("wop"));
                v.add(rs.getString("festival"));
                v.add(rs.getString("stamp"));
                v.add(rs.getString("tEarning"));
                v.add(rs.getString("tGross"));
                v.add(rs.getString("tDeduction"));
                v.add(rs.getString("nPay"));
                v.add(rs.getString("userName"));
                dtm.addRow(v);
            }
            double tot = 0, totW=0, totF=0, totS=0;
            for (int i = 0; i < dtm.getRowCount(); i++) {
                tot = tot + Double.parseDouble(dtm.getValueAt(i, 9).toString());
                totW = totW + Double.parseDouble(dtm.getValueAt(i, 3).toString());
                totF = totF + Double.parseDouble(dtm.getValueAt(i, 4).toString());
                totS = totS + Double.parseDouble(dtm.getValueAt(i, 5).toString());
            }
//            txtTPaid.setText("");
            txtTPaid.setText(tot + "");
            txtWOP.setText(totW+"");
            txtFAdvance.setText(totF+"");
            txtStamp.setText(totS+"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SMSalaryTableAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prSMSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prSMSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prSMSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prSMSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new prSMSalary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> MonthComboBox;
    private javax.swing.JTable SMSalaryTable;
    private javax.swing.JComboBox<String> YearComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFAdvance;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtSearchStatus;
    private javax.swing.JTextField txtStamp;
    private javax.swing.JTextField txtTPaid;
    private javax.swing.JTextField txtWOP;
    // End of variables declaration//GEN-END:variables
}
